- name: create ec2 and r53
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    ami_id: ami-09c813fb71547fc4f
    sg_id: sg-071f5060587c84be7
    zone_id: Z02150843EPAKGJ2WU2UT
    domain_name: daws86s.sbs
    instance:
      - mongodb
      - redis
      - mysql
      - rabbitmq
      - catalogue
      - user
      - cart
      - shipping
      - nginx
      - payment
      - frontend




  tasks:
    - name: create ec2 instance
      amazon.aws.ec2_instance:
        name: "{{ item }}"
        instance_type: t3.micro
        security_group: "{{ sg_id }}"
        image_id: "{{ ami_id }}"
        tags:
          Name: "{{ item }}"
      loop: "{{ instance }}"
      register: ec2_output

    # - name: print the ec2_output
    #   ansible.builtin.debug:
    #     var: ec2_output

    # - name: print public_ip
    #   ansible.builtin.debug: 
    #    msg: "{{ item.instances[0].public_ip_address }}"
    #   loop: "{{ ec2_output.results }}"

    # - name: print private_ip
    #   ansible.builtin.debug: 
    #    msg: "{{ item.instances[0].private_ip_address }}"
    #   loop: "{{ ec2_output.results }}"

    - name: create Route 53 record
      amazon.aws.route53:
        zone: "{{ domain_name }}"
        type: A
        record: "{{ item.item }}.{{ domain_name }}"
        ttl: 1
        value: "{{ item.instances[0].private_ip_address }}"
        state: present
        overwrite: true
      loop: "{{ ec2_output.results }}"

    - name: create route53 record for frontend
      amazon.aws.route53:
        state: present
        zone: "{{ domain_name }}"
        record: "{{ domain_name }}" # daws86s.sbs
        type: A
        ttl: 1
        value: "{{ item.instances[0].public_ip_address }}"
        overwrite: true
      when: item.item == "frontend"
      loop: "{{ ec2_output.results }}"  
